// <auto-generated />
using dotnet_g1e.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace dotnet_g1e.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180429170813_fixRelations")]
    partial class fixRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dotnet_g1e.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.AccessCode", b =>
                {
                    b.Property<int>("AccessCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.HasKey("AccessCodeId");

                    b.ToTable("AccessCodes");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CodeAccessCodeId");

                    b.Property<string>("Instruction");

                    b.Property<string>("Name");

                    b.HasKey("ActionId");

                    b.HasIndex("CodeAccessCodeId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Breakoutbox", b =>
                {
                    b.Property<int>("BreakoutboxId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<string>("Description");

                    b.Property<bool>("InActiveUse");

                    b.Property<string>("Name");

                    b.HasKey("BreakoutboxId");

                    b.ToTable("Breakoutboxes");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.BreakoutboxAccessCode", b =>
                {
                    b.Property<int>("AccessCodeId");

                    b.Property<int>("BreakoutboxId");

                    b.HasKey("AccessCodeId", "BreakoutboxId");

                    b.HasIndex("BreakoutboxId");

                    b.ToTable("BreakoutboxAccessCode");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.BreakoutboxAction", b =>
                {
                    b.Property<int>("BreakoutboxId");

                    b.Property<int>("ActionId");

                    b.HasKey("BreakoutboxId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("BreakoutboxAction");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.BreakoutboxExercise", b =>
                {
                    b.Property<int>("BreakoutboxId");

                    b.Property<int>("ExerciseId");

                    b.HasKey("BreakoutboxId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("BreakoutboxExercise");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Classgroup", b =>
                {
                    b.Property<int>("ClassGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassgroupName");

                    b.HasKey("ClassGroupId");

                    b.ToTable("Classgroups");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.ClassGroupPupil", b =>
                {
                    b.Property<int>("ClassGroupId");

                    b.Property<int>("PupilId");

                    b.HasKey("ClassGroupId", "PupilId");

                    b.HasIndex("PupilId");

                    b.ToTable("ClassGroupPupil");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Course");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<bool>("InActiveUse");

                    b.Property<string>("Name");

                    b.Property<int?>("ResultId");

                    b.Property<int>("TimeLimit");

                    b.HasKey("ExerciseId");

                    b.HasIndex("ResultId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.ExerciseModifier", b =>
                {
                    b.Property<int>("ExerciseId");

                    b.Property<int>("ModifierId");

                    b.HasKey("ExerciseId", "ModifierId");

                    b.HasIndex("ModifierId");

                    b.ToTable("ExerciseModifier");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Modifier", b =>
                {
                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Value");

                    b.HasKey("ModifierId");

                    b.ToTable("Modifiers");

                    b.HasDiscriminator<string>("Type").HasValue("Modifier");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.PlayGroup", b =>
                {
                    b.Property<int>("PlayGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("PlayGroupId");

                    b.ToTable("PlayGroups");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.PlayGroupPupil", b =>
                {
                    b.Property<int>("PlayGroupId");

                    b.Property<int>("PupilId");

                    b.HasKey("PlayGroupId", "PupilId");

                    b.HasIndex("PupilId");

                    b.ToTable("PlayGroupPupil");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Pupil", b =>
                {
                    b.Property<int>("PupilId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("PupilId");

                    b.ToTable("Pupils");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Result<string>", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("ResultId");

                    b.ToTable("Result<string>");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.SessionPlayGroup", b =>
                {
                    b.Property<int>("PlayGroupId");

                    b.Property<int>("SessionId");

                    b.HasKey("PlayGroupId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionPlayGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActiveSession");

                    b.Property<int?>("BreakoutboxId");

                    b.Property<int?>("ClassGroupId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("SessionId");

                    b.HasIndex("BreakoutboxId");

                    b.HasIndex("ClassGroupId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.AddModifier", b =>
                {
                    b.HasBaseType("dotnet_g1e.Models.Domain.Modifier");


                    b.ToTable("AddModifier");

                    b.HasDiscriminator().HasValue("AddModifier");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Action", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.AccessCode", "Code")
                        .WithMany()
                        .HasForeignKey("CodeAccessCodeId");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.BreakoutboxAccessCode", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.AccessCode", "AccessCode")
                        .WithMany("BreakoutboxAccessCodes")
                        .HasForeignKey("AccessCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.Domain.Breakoutbox", "Breakoutbox")
                        .WithMany("BreakoutboxAccessCodes")
                        .HasForeignKey("BreakoutboxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.BreakoutboxAction", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.Action", "Action")
                        .WithMany("BreakoutboxActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.Domain.Breakoutbox", "Breakoutbox")
                        .WithMany("BreakoutboxActions")
                        .HasForeignKey("BreakoutboxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.BreakoutboxExercise", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.Breakoutbox", "Breakoutbox")
                        .WithMany("BreakoutboxExercises")
                        .HasForeignKey("BreakoutboxId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.Domain.Exercise", "Exercise")
                        .WithMany("BreakoutboxExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.ClassGroupPupil", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.Classgroup", "Classgroup")
                        .WithMany("ClassGroupPupils")
                        .HasForeignKey("ClassGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.Domain.Pupil", "Pupil")
                        .WithMany("ClassGroupPupils")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.Exercise", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.Result<string>", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.ExerciseModifier", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.Exercise", "Exercise")
                        .WithMany("ExerciseModifiers")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.Domain.Modifier", "Modifier")
                        .WithMany("ExerciseModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.PlayGroupPupil", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.PlayGroup", "PlayGroup")
                        .WithMany("PlayGroupPupils")
                        .HasForeignKey("PlayGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.Domain.Pupil", "Pupil")
                        .WithMany("PlayGroupPupils")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dotnet_g1e.Models.Domain.SessionPlayGroup", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.PlayGroup", "PlayGroup")
                        .WithMany("SessionPlayGroups")
                        .HasForeignKey("PlayGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Session", "Session")
                        .WithMany("SessionPlayGroups")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotnet_g1e.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotnet_g1e.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dotnet_g1e.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotnet_g1e.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.HasOne("dotnet_g1e.Models.Domain.Breakoutbox", "Breakoutbox")
                        .WithMany()
                        .HasForeignKey("BreakoutboxId");

                    b.HasOne("dotnet_g1e.Models.Domain.Classgroup", "Classgroup")
                        .WithMany()
                        .HasForeignKey("ClassGroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
